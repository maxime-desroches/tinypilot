; The idea is that instead of using combinations of os.path.dirname,
; os.path.abspath, os.path.realpath and os.path.join, like in the following
; example:
;
;   vidindex_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), "vidindex")
;
; a line like the following could be used:
;
;   vidindex_dir = config.get_path("TOOLS_FRAMEREADER_VIDINDEX_DIR")
;
; which is simpler, allows not hardcoding-in the file structure and involves
; less python kung fu.
;   
; The config.get_path function would return the absolute path of the requested
; directory based on the definition of "BASEDIR" and the host OS path
; directive.
;
; The true value of this, in my opinion, is enabling the option to separate
; data from logic, which is what systems like Linux do: keep logic,
; configurations and generated data separately, e.g. in the /usr/bin and
; /usr/lib, in /etc and in /var directories, respectively.
;
; This config file is looked for in the following locations
;
; - /etc/openpilot/config.ini
; - $XDG_CONFIG_HOME/openpilot/config.ini
; - $HOME/.openpilot/config.ini
; - (installation directory in some non-unix-like operating system)
; - %APPDATA%\\Programs\\openpilot\\config.ini
;
; Redefinitions override previous definitions
;
; Needless to say, the names I provide below for the different directories are
; probably not the best ones, I just loosely based them on the path they
; describe. The lines commented below them are just instances where such paths
; are used in the codebase.
;
[path]
; BASEDIR = /opt/openpilot
BASEDIR = 
; ./common/basedir.py:BASEDIR = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), ../))

SELFDRIVE_DIR = selfdrive
; ./selfdrive/manager.py:  os.chdir(os.path.dirname(os.path.abspath(__file__)))
; os.chdir()

SELFDRIVE_CONTROLS_CLUSTER_DIR = selfdrive/controls/lib/cluster
; ./selfdrive/controls/lib/cluster/fastcluster_py.py:cluster_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)))

SELFDRIVE_CONTROLS_LONG_MPC_MODEL_DIR = selfdrive/controls/lib/longitudinal_mpc_model
; ./selfdrive/controls/lib/longitudinal_mpc_model/libmpc_py.py:mpc_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)))

SELFDRIVE_CONTROLS_LONG_MPC_DIR = selfdrive/controls/lib/longitudinal_mpc_model
; ./selfdrive/controls/lib/longitudinal_mpc/libmpc_py.py:mpc_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)))

SELFDRIVE_CONTROLS_LAT_MPC_DIR = selfdrive/controls/lib/lateral_mpc
; ./selfdrive/controls/lib/lateral_mpc/libmpc_py.py:mpc_dir = os.path.dirname(os.path.abspath(__file__))

SELFDRIVE_VERSION_FILE = selfdrive/common/version.h
; ./selfdrive/version.py:with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), common, version.h)) as _versionf:

SELFDRIVE_TEST_REPLAY_DIR = selfdrive/test/process_replay
; ./selfdrive/test/process_replay/camera_replay.py:  replay_dir         = os.path.dirname(os.path.abspath(__file__))
; ./selfdrive/test/process_replay/update_model.py:   process_replay_dir = os.path.dirname(os.path.abspath(__file__))
; ./selfdrive/test/process_replay/update_refs.py:    process_replay_dir = os.path.dirname(os.path.abspath(__file__))
; ./selfdrive/test/process_replay/test_processes.py: process_replay_dir = os.path.dirname(os.path.abspath(__file__))
; ./selfdrive/test/process_replay/test_processes.py: process_replay_dir = os.path.dirname(os.path.abspath(__file__))

SELFDRIVE_MODEL_VISIOND_DIR = selfdrive/modeld
; ./selfdrive/modeld/visiontest.py:_visiond_dir = os.path.dirname(os.path.abspath(__file__))

SELFDRIVE_LOCATIOND_TEST_DIR = selfdrive/locationd/test
; ./selfdrive/locationd/test/ci_test.py:  cur_dir = os.path.dirname(os.path.realpath(__file__))

SELFDRIVE_LOCATIOND_GENERATED_DIR = selfdrive/locationd/models/generated
; ./selfdrive/locationd/models/constants.py:GENERATED_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), 'generated'))

TOOLS_FRAMEREADER_VIDINDEX_DIR = tools/lib/vidindex
; ./tools/lib/framereader.py:  vidindex_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), vidindex)

TOOLS_LOGREADER_OP_DIR = cereal
; ./tools/lib/logreader.py:OP_PATH = os.path.dirname(os.path.dirname(capnp_log.__file__))
; I'm not too sure which directory this points to

TOOLS_LOGREADER_LOG_DIR = tools/lib/index_log
; ./tools/lib/logreader.py:  index_log_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), index_log)
