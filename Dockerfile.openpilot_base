# Use a multi-stage build to keep the final image clean and minimal
# Base stage for installations
FROM ubuntu:20.04 as builder

ENV PYTHONUNBUFFERED 1
ENV DEBIAN_FRONTEND noninteractive
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# Consolidate package installation and cleanup to reduce layer size
RUN apt-get update && apt-get install -y --no-install-recommends \
    sudo tzdata locales ssh pulseaudio xvfb x11-xserver-utils gnome-screenshot \
    apt-utils alien unzip tar curl xz-utils dbus gcc-arm-none-eabi tmux vim lsb-core libx11-6 \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && locale-gen \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /etc/OpenCL/vendors

# Install OpenCL drivers
ARG INTEL_DRIVER=l_opencl_p_18.1.0.015.tgz
ARG INTEL_DRIVER_URL=https://registrationcenter-download.intel.com/akdlm/irc_nas/vcp/15532

RUN mkdir /tmp/opencl-driver-intel \
    && cd /tmp/opencl-driver-intel \
    && curl -O $INTEL_DRIVER_URL/$INTEL_DRIVER \
    && tar -xzf $INTEL_DRIVER \
    && for i in $(basename $INTEL_DRIVER .tgz)/rpm/*.rpm; do alien --to-deb $i; done \
    && dpkg -i *.deb \
    && echo /opt/intel/opencl_compilers_and_libraries_18.1.0.015/linux/compiler/lib/intel64_lin/libintelocl.so > /etc/OpenCL/vendors/intel.icd \
    && rm -rf $INTEL_DRIVER $(basename $INTEL_DRIVER .tgz) *.deb /tmp/opencl-driver-intel

# Final stage to reduce size
FROM ubuntu:20.04

# Copy necessary files from builder stage
COPY --from=builder / /

ENV PYTHONUNBUFFERED 1
ENV DEBIAN_FRONTEND noninteractive
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES graphics,utility,compute
ENV QTWEBENGINE_DISABLE_SANDBOX 1
ENV POETRY_VIRTUALENVS_CREATE false
ENV PYENV_VERSION 3.11.4
ENV PYENV_ROOT "/home/batman/pyenv"
ENV PATH "$PYENV_ROOT/bin:$PYENV_ROOT/shims:$PATH"

RUN dbus-uuidgen > /etc/machine-id \
    && useradd -m -s /bin/bash -u 1000 batman \
    && usermod -aG sudo batman \
    && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

USER batman

# Copy scripts and execute as the non-root user
COPY --chown=batman pyproject.toml poetry.lock .python-version /tmp/
COPY --chown=batman tools/ /tmp/tools/

RUN cd /tmp && ./tools/install_ubuntu_dependencies.sh && ./tools/install_python_dependencies.sh \
    && rm -rf /tmp/* /home/batman/.cache \
    && find /home/batman/pyenv -type d -name ".git" -exec rm -rf {} + \
    && rm -rf /home/batman/pyenv/versions/3.11.4/lib/python3.11/test

USER root
RUN git config --global --add safe.directory /tmp/openpilot
