import cereal
import copy
from operator import attrgetter


typeMap = {
  "int8": {"type": "integer"},
  "int16": {"type": "integer"},
  "int32": {"type": "integer"},
  "int64": {"type": "integer"},
  "uint8": {"type": "integer"},
  "uint16": {"type": "integer"},
  "uint32": {"type": "integer"},
  "uint64": {"type": "string"},
  "float32": {"type": "number"},
  "float64": {"type": "number"},
  "text": {"type": "string"},
  "data": {"type": "string", "contentEncoding": "base64"},
  "bool": {"type": "boolean"},
}

def name_to_schema(name):
  file_name = name.split(':')[0].split('.')[0]
  type_name = name.split(':')[-1]
  path = f"{file_name}.{type_name}"
  return attrgetter(path)(cereal).schema



def list_schema_to_json(schema, et, bind = None):
  w = et.which
  if str(w) == "data":
    return { "type": "string" }
  elif str(w) in typeMap:
    return { "type": "array", "items": typeMap[str(w)] }
  elif str(w) == 'struct':
    name = schema.elementType.node.displayName
    try:
      field_schema = name_to_schema(name)
    except:
      print("skipping legacy data")
      return None
    return { "type": "array", "items": schema_to_json(field_schema, bind) }
  elif str(w) == 'enum':
    return { "type": "array", "items": { "type": "string", "enum": list(schema.elementType.enumerants.keys()) } }
  elif str(w) == 'list':
    return None

  else:
    print(f"warning, unsupported elementType: {et}")
    return { "type": "array" }

def schema_to_json(schema, bind = None):
  t = schema.node.which
  if t == 'struct':
    base = { "type": "object", "properties": {}}
    for f in schema.fields_list:
      w = f.proto.which
      if w == 'slot':
        ft = f.proto.slot.type.which
        if ft == 'struct':
          name = f.schema.node.displayName
          try:
            field_schema = name_to_schema(name)
            if f.schema.node.isGeneric:
              base["properties"][f.proto.name] = schema_to_json(field_schema, f.proto.slot.type.struct.brand.scopes[0].bind)
            else:
              base["properties"][f.proto.name] = schema_to_json(field_schema)
          except:
            print("skipping legacy data")
        elif str(ft) in typeMap:
          base["properties"][f.proto.name] = typeMap[str(ft)]
        elif str(ft) == 'list':
          et = f.proto.slot.type.list.elementType
          l = list_schema_to_json(f.schema, et, bind)
          if l is not None:
            base["properties"][f.proto.name] = l
          else:
            print("warning, foxglove does not support lists in lists, skipping field")
        elif str(ft) == 'enum':
          base["properties"][f.proto.name] = {"type": "string", "enum": list(f.schema.enumerants.keys())}
        elif str(ft) == 'anyPointer':
          bindIndex = f.proto.slot.type.anyPointer.parameter.parameterIndex
          pt = bind[bindIndex].type.which
          if str(pt) in typeMap:
            base["properties"][f.proto.name] = typeMap[str(pt)]
          else:
            print(f"warning, unsupported pointer type: {pt}")
        else:
          print(f"warning, unsupported schema type: {ft}")
      elif w == 'group':
        group = schema_to_json(f.schema)
        base = base | group
    return base
  else:
    print(f"warning, unsupported schema type: {t}")
    return None

def get_event_schemas():
  schemas = {}
  base_template = { "type": "object", "properties": { "logMonoTime": {"type": "string"}, "valid": {"type": "boolean"} } }
  for field in cereal.log.Event.schema.fields_list:
    base = copy.deepcopy(base_template)
    w = field.proto.which
    if field.proto.name not in cereal.log.Event.schema.union_fields:
      continue
    if w == 'slot':
      ft = field.proto.slot.type.which
      if ft == 'struct':
        name = field.schema.node.displayName
        try:
          field_schema = name_to_schema(name)
          if field.schema.node.isGeneric:
            base["properties"][field.proto.name] = schema_to_json(field_schema, field.proto.slot.type.struct.brand.scopes[0].bind)
          else:
            base["properties"][field.proto.name] = schema_to_json(field_schema)
        except:
          print("skipping legacy data")
      elif str(ft) in typeMap:
        base["properties"][field.proto.name] = typeMap[str(ft)]
      elif str(ft) == 'list':
        et = field.proto.slot.type.list.elementType
        l = list_schema_to_json(field.schema, et)
        if l is not None:
          base["properties"][field.proto.name] = l
        else:
          print("warning, foxglove does not support lists in lists, skipping field")
      elif str(ft) == 'enum':
        base["properties"][field.proto.name] = {"type": "string", "enum": list(field.schema.enumerants.keys())}
      else:
        print(f"warning, unsupported schema type: {ft}")
    schemas[field.proto.name] = base

  return schemas


rawImage = {
  "title": "foxglove.RawImage",
  "description": "A raw image",
  "$comment": "Generated by https://github.com/foxglove/schemas",
  "type": "object",
  "properties": {
    "timestamp": {
      "type": "object",
      "title": "time",
      "properties": {
        "sec": {
          "type": "integer",
          "minimum": 0
        },
        "nsec": {
          "type": "integer",
          "minimum": 0,
          "maximum": 999999999
        }
      },
      "description": "Timestamp of image"
    },
    "frame_id": {
      "type": "string",
      "description": "Frame of reference for the image. The origin of the frame is the optical center of the camera. +x points to the right in the image, +y points down, and +z points into the plane of the image."
    },
    "width": {
      "type": "integer",
      "minimum": 0,
      "description": "Image width"
    },
    "height": {
      "type": "integer",
      "minimum": 0,
      "description": "Image height"
    },
    "encoding": {
      "type": "string",
      "description": "Encoding of the raw image data\n\nSupported values: `8UC1`, `8UC3`, `16UC1`, `32FC1`, `bayer_bggr8`, `bayer_gbrg8`, `bayer_grbg8`, `bayer_rggb8`, `bgr8`, `bgra8`, `mono8`, `mono16`, `rgb8`, `rgba8`, `uyvy` or `yuv422`, `yuyv` or `yuv422_yuy2`"
    },
    "step": {
      "type": "integer",
      "minimum": 0,
      "description": "Byte length of a single row"
    },
    "data": {
      "type": "string",
      "contentEncoding": "base64",
      "description": "Raw image data"
    }
  }
}

compressedImage = {
  "title": "foxglove.CompressedImage",
  "description": "A compressed image",
  "$comment": "Generated by https://github.com/foxglove/schemas",
  "type": "object",
  "properties": {
    "timestamp": {
      "type": "object",
      "title": "time",
      "properties": {
        "sec": {
          "type": "integer",
          "minimum": 0
        },
        "nsec": {
          "type": "integer",
          "minimum": 0,
          "maximum": 999999999
        }
      },
      "description": "Timestamp of image"
    },
    "frame_id": {
      "type": "string",
      "description": "Frame of reference for the image. The origin of the frame is the optical center of the camera. +x points to the right in the image, +y points down, and +z points into the plane of the image."
    },
    "data": {
      "type": "string",
      "contentEncoding": "base64",
      "description": "Compressed image data"
    },
    "format": {
      "type": "string",
      "description": "Image format\n\nSupported values: image media types supported by Chrome, such as `webp`, `jpeg`, `png`"
    }
  }
}

frameTransform = {
  "title": "foxglove.FrameTransform",
  "description": "A transform between two reference frames in 3D space",
  "$comment": "Generated by https://github.com/foxglove/schemas",
  "type": "object",
  "properties": {
    "timestamp": {
      "type": "object",
      "title": "time",
      "properties": {
        "sec": {
          "type": "integer",
          "minimum": 0
        },
        "nsec": {
          "type": "integer",
          "minimum": 0,
          "maximum": 999999999
        }
      },
      "description": "Timestamp of transform"
    },
    "parent_frame_id": {
      "type": "string",
      "description": "Name of the parent frame"
    },
    "child_frame_id": {
      "type": "string",
      "description": "Name of the child frame"
    },
    "translation": {
      "title": "foxglove.Vector3",
      "description": "Translation component of the transform",
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "description": "x coordinate length"
        },
        "y": {
          "type": "number",
          "description": "y coordinate length"
        },
        "z": {
          "type": "number",
          "description": "z coordinate length"
        }
      }
    },
    "rotation": {
      "title": "foxglove.Quaternion",
      "description": "Rotation component of the transform",
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "description": "x value"
        },
        "y": {
          "type": "number",
          "description": "y value"
        },
        "z": {
          "type": "number",
          "description": "z value"
        },
        "w": {
          "type": "number",
          "description": "w value"
        }
      }
    }
  }
}

locationFix = {
  "title": "foxglove.LocationFix",
  "description": "A navigation satellite fix for any Global Navigation Satellite System",
  "$comment": "Generated by https://github.com/foxglove/schemas",
  "type": "object",
  "properties": {
    "timestamp": {
      "type": "object",
      "title": "time",
      "properties": {
        "sec": {
          "type": "integer",
          "minimum": 0
        },
        "nsec": {
          "type": "integer",
          "minimum": 0,
          "maximum": 999999999
        }
      },
      "description": "Timestamp of the message"
    },
    "frame_id": {
      "type": "string",
      "description": "Frame for the sensor. Latitude and longitude readings are at the origin of the frame."
    },
    "latitude": {
      "type": "number",
      "description": "Latitude in degrees"
    },
    "longitude": {
      "type": "number",
      "description": "Longitude in degrees"
    },
    "altitude": {
      "type": "number",
      "description": "Altitude in meters"
    },
    "position_covariance": {
      "type": "array",
      "items": {
        "type": "number"
      },
      "minItems": 9,
      "maxItems": 9,
      "description": "Position covariance (m^2) defined relative to a tangential plane through the reported position. The components are East, North, and Up (ENU), in row-major order."
    },
    "position_covariance_type": {
      "title": "foxglove.PositionCovarianceType",
      "description": "If `position_covariance` is available, `position_covariance_type` must be set to indicate the type of covariance.",
      "oneOf": [
        {
          "title": "UNKNOWN",
          "const": 0
        },
        {
          "title": "APPROXIMATED",
          "const": 1
        },
        {
          "title": "DIAGONAL_KNOWN",
          "const": 2
        },
        {
          "title": "KNOWN",
          "const": 3
        }
      ]
    }
  }
}

logs = {
  "title": "foxglove.Log",
  "description": "A log message",
  "$comment": "Generated by https://github.com/foxglove/schemas",
  "type": "object",
  "properties": {
    "timestamp": {
      "type": "object",
      "title": "time",
      "properties": {
        "sec": {
          "type": "integer",
          "minimum": 0
        },
        "nsec": {
          "type": "integer",
          "minimum": 0,
          "maximum": 999999999
        }
      },
      "description": "Timestamp of log message"
    },
    "level": {
      "title": "foxglove.LogLevel",
      "description": "Log level",
      "oneOf": [
        {
          "title": "UNKNOWN",
          "const": 0
        },
        {
          "title": "DEBUG",
          "const": 1
        },
        {
          "title": "INFO",
          "const": 2
        },
        {
          "title": "WARNING",
          "const": 3
        },
        {
          "title": "ERROR",
          "const": 4
        },
        {
          "title": "FATAL",
          "const": 5
        }
      ]
    },
    "message": {
      "type": "string",
      "description": "Log message"
    },
    "name": {
      "type": "string",
      "description": "Process or node name"
    },
    "file": {
      "type": "string",
      "description": "Filename"
    },
    "line": {
      "type": "integer",
      "minimum": 0,
      "description": "Line number in the file"
    }
  }
}
