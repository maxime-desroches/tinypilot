Import('env', 'arch', 'cereal', 'messaging', 'common', 'gpucommon', 'visionipc', 'USE_WEBCAM')

libs = ['m', 'pthread', common, 'jpeg', 'OpenCL', 'yuv', cereal, messaging, 'zmq', 'capnp', 'kj', visionipc, gpucommon]

cameras = []
if arch == "larch64":
  libs += ['atomic']
  cameras = ['cameras/camera_qcom2.cc']
elif USE_WEBCAM:
  env['CXXFLAGS'] += ["-Wno-deprecated-declarations"]
  libs += ['opencv_core', 'opencv_highgui', 'opencv_imgproc', 'opencv_videoio']
  cameras = ['cameras/camera_webcam.cc']

  env = env.Clone()
  env.Append(CXXFLAGS = '-DWEBCAM')
  env.Append(CFLAGS = '-DWEBCAM')
  env.Append(CPPPATH = ['/usr/include/opencv4', '/usr/local/include/opencv4'])

  if arch == "Darwin":
    del libs[libs.index('OpenCL')]
    del libs[libs.index(gpucommon)][gpucommon.index('GL')]
    env = env.Clone()
    env['FRAMEWORKS'] = ['OpenCL', 'OpenGL']

if len(cameras):
  env.Program('camerad', [
      'main.cc',
      'cameras/camera_common.cc',
      'transforms/rgb_to_yuv.cc',
      'imgproc/utils.cc',
      cameras,
    ], LIBS=libs)

  if GetOption("test"):
    env.Program('test/ae_gray_test', [
        'test/ae_gray_test.cc',
        'cameras/camera_common.cc',
        'transforms/rgb_to_yuv.cc',
      ], LIBS=libs)
